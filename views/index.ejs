<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AWS Media Tool - <%= pageTitle %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .hidden { display: none; }
        .btn {
            padding: 0.25rem 0.75rem;
            border-radius: 0.375rem;
            font-weight: 600;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .btn-green { background-color: #16a34a; }
        .btn-green:hover { background-color: #15803d; }
        .btn-red { background-color: #dc2626; }
        .btn-red:hover { background-color: #b91c1c; }
        .btn-gray { background-color: #6b7280; }
        .btn-gray:hover { background-color: #4b5563; }
        .btn-blue { background-color: #2563eb; }
        .btn-blue:hover { background-color: #1d4ed8; }
        /* Style dla aktywnej zakładki */
        .tab-active {
            border-color: #3b82f6 !important;
            color: #2563eb !important;
        }
        /* Style dla panelu bocznego */
        .sidebar {
            min-height: calc(100vh - 2rem);
            background-color: #f3f4f6;
        }
        .event-item {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .event-item:hover {
            background-color: #e5e7eb;
        }
        .event-item.active {
            background-color: #dbeafe;
            border-left: 3px solid #3b82f6;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 font-sans">
    <div class="container-fluid mx-auto p-4">
        <!-- Nagłówek -->
        <header class="flex justify-between items-center mb-6 flex-wrap gap-4">
            <h1 class="text-3xl font-bold text-gray-700">AWS Media Tool <span class="text-xl font-normal text-blue-600">v1.5 (Node.js)</span></h1>
            <form action="/" method="GET" class="flex items-center space-x-2">
                <label for="region-select" class="text-sm font-medium text-gray-600">Region:</label>
                <select name="region" id="region-select" onchange="this.form.submit()" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                    <% if (availableRegions && availableRegions.length > 0) { %>
                        <% availableRegions.forEach(region => { %>
                            <option value="<%= region %>" <%= (region === currentRegion) ? 'selected' : '' %>>
                                <%= region %>
                            </option>
                        <% }); %>
                    <% } else if (currentRegion) { %>
                        <option value="<%= currentRegion %>" selected><%= currentRegion %></option>
                    <% } else { %>
                        <option>Wybierz region</option>
                    <% } %>
                </select>
            </form>
        </header>

        <!-- Główny layout dwukolumnowy -->
        <div class="flex gap-6">
            <!-- Panel boczny z listą eventów -->
            <aside class="w-80 sidebar bg-white rounded-xl shadow-md p-4">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-700">Eventy</h2>
                    <button id="open-create-event-modal" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-lg text-sm font-medium">
                        + Nowy Event
                    </button>
                </div>
                <div id="events-list" class="space-y-2">
                    <!-- Lista eventów będzie dynamicznie załadowana tutaj -->
                    <div class="text-gray-500 text-sm p-4 text-center">Ładowanie eventów...</div>
                </div>
            </aside>

            <!-- Główna zawartość -->
            <main class="flex-1">
                 <!-- Client-side notification area -->
                <div id="notification-area" class="mb-4"></div>

                <!-- Widok domyślny (formularze) -->
                <div id="default-view">
                    <div class="space-y-8">
                        <% if (typeof error !== 'undefined' && error && error.length > 0) { %>
                            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg" role="alert">
                                <strong class="font-bold">Błąd!</strong> <span class="block sm:inline"><%= error %></span>
                            </div>
                        <% } %>
                        <% if (typeof message !== 'undefined' && message && message.length > 0) { %>
                            <div class="bg-<%= messageStatus === 'success' ? 'green' : 'red' %>-100 border border-<%= messageStatus === 'success' ? 'green' : 'red' %>-400 text-<%= messageStatus === 'success' ? 'green' : 'red' %>-700 px-4 py-3 rounded-lg" role="alert">
                                <strong class="font-bold"><%= messageStatus === 'success' ? 'Sukces!' : 'Błąd!' %></strong>
                                <span class="block sm:inline"><%= message %></span>
                            </div>
                        <% } %>

                        <!-- Formularze tworzenia zasobów -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <div class="bg-white p-6 rounded-xl shadow-md">
                                <h2 class="text-xl font-semibold mb-2">Krok 1: Stwórz nowy Input</h2>
                                <div class="border-b border-gray-200">
                                    <nav class="-mb-px flex space-x-4" aria-label="Tabs">
                                        <button data-tab-target="rtmp" class="tab-button whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 tab-active">RTMP Push</button>
                                        <button data-tab-target="mediaconnect" class="tab-button whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">MediaConnect</button>
                                        <button data-tab-target="mp4" id="mp4-tab-button" class="tab-button whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">MP4 (S3)</button>
                                        <button data-tab-target="link" class="tab-button whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">Link</button>
                                    </nav>
                                </div>
                                <div class="pt-4">
                                <div id="panel-rtmp" class="tab-panel">
                                    <form action="/inputs/create-rtmp" method="POST">
                                            <input type="hidden" name="region" value="<%= currentRegion %>">
                                            <div class="mb-4">
                                                <label for="inputName" class="block text-sm font-bold text-gray-700 mb-2">Nazwa Inputu</label>
                                                <input type="text" id="inputName" name="inputName" placeholder="np. moj-stream-rtmp" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                            </div>
                                            <div class="mb-4">
                                                <label class="block text-sm font-bold text-gray-700 mb-2">Klasa Inputu</label>
                                                <div class="flex items-center space-x-4">
                                                    <label class="flex items-center"><input type="radio" name="inputClass" value="SINGLE_PIPELINE" class="form-radio"><span class="ml-2">Single</span></label>
                                                    <label class="flex items-center"><input type="radio" name="inputClass" value="STANDARD" class="form-radio" checked><span class="ml-2">Standard</span></label>
                                                </div>
                                            </div>
                                            <div class="mb-4">
                                                <label for="securityGroupId" class="block text-sm font-bold text-gray-700 mb-2">Grupa Bezpieczeństwa</label>
                                                <select id="securityGroupId" name="securityGroupId" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                                    <% if (inputSecurityGroups && inputSecurityGroups.length > 0) { %>
                                                        <% inputSecurityGroups.forEach(sg => { %>
                                                            <option value="<%= sg.Id %>"><%= sg.Id %> (<%= Object.keys(sg.Tags || {}).length > 0 ? sg.Tags.Name || 'bez nazwy' : 'bez tagów' %>)</option>
                                                        <% }); %>
                                                    <% } else { %>
                                                        <option value="" disabled>Brak grup bezpieczeństwa</option>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg" <% if (!currentRegion || !inputSecurityGroups || inputSecurityGroups.length === 0) { %>disabled<% } %>>Stwórz Input RTMP</button>
                                    </form>
                                </div>
                                <div id="panel-mediaconnect" class="tab-panel hidden">
                                    <form action="/inputs/create-mediaconnect" method="POST">
                                            <input type="hidden" name="region" value="<%= currentRegion %>">
                                            <div class="mb-4">
                                                <label for="inputNameMc" class="block text-sm font-bold text-gray-700 mb-2">Nazwa Inputu</label>
                                                <input type="text" id="inputNameMc" name="inputName" placeholder="np. moj-flow-mediaconnect" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                            </div>
                                            <div class="mb-4">
                                                <label class="block text-sm font-bold text-gray-700 mb-2">Klasa Inputu</label>
                                                <div class="flex items-center space-x-4" id="mc-class-radios">
                                                    <label class="flex items-center"><input type="radio" name="inputClassMc" value="SINGLE" class="form-radio" checked><span class="ml-2">Single</span></label>
                                                    <label class="flex items-center"><input type="radio" name="inputClassMc" value="STANDARD" class="form-radio"><span class="ml-2">Standard</span></label>
                                                </div>
                                            </div>
                                            <div class="mb-4">
                                                <label for="flowArn1" class="block text-sm font-bold text-gray-700 mb-2">MediaConnect Flow (Pipeline 0)</label>
                                                <select id="flowArn1" name="flowArn1" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                                    <option value="" disabled selected>-- Wybierz flow --</option>
                                                    <% if (mediaConnectFlows && mediaConnectFlows.length > 0) { %>
                                                        <% mediaConnectFlows.forEach(flow => { %>
                                                            <option value="<%= flow.FlowArn %>"><%= flow.Name %> (<%= flow.AvailabilityZone %> | <%= flow.Status %>)</option>
                                                        <% }); %>
                                                    <% } else { %>
                                                        <option disabled>Brak flow w tym regionie</option>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <div id="mc-flow2-container" class="mb-4 hidden">
                                                <label for="flowArn2" class="block text-sm font-bold text-gray-700 mb-2">MediaConnect Flow (Pipeline 1)</label>
                                                <select id="flowArn2" name="flowArn2" class="shadow-sm w-full border rounded-lg py-2 px-3">
                                                    <option value="">-- Wybierz drugi flow --</option>
                                                    <% if (mediaConnectFlows && mediaConnectFlows.length > 0) { %>
                                                        <% mediaConnectFlows.forEach(flow => { %>
                                                            <option value="<%= flow.FlowArn %>"><%= flow.Name %> (<%= flow.AvailabilityZone %> | <%= flow.Status %>)</option>
                                                        <% }); %>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg" <% if (!mediaConnectFlows || mediaConnectFlows.length === 0) { %>disabled<% } %>>Stwórz Input MediaConnect</button>
                                    </form>
                                </div>
                                <div id="panel-mp4" class="tab-panel hidden">
                                    <form action="/inputs/create-mp4" method="POST">
                                            <input type="hidden" name="region" value="<%= currentRegion %>">
                                            <div class="mb-4">
                                                <label for="inputNameMp4" class="block text-sm font-bold text-gray-700 mb-2">Nazwa Inputu</label>
                                                <input type="text" id="inputNameMp4" name="inputName" placeholder="np. plik-z-s3" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                            </div>
                                            <div class="mb-4">
                                                <label class="block text-sm font-bold text-gray-700 mb-2">Klasa Inputu</label>
                                                <div class="flex items-center space-x-4">
                                                    <label class="flex items-center"><input type="radio" name="inputClass" value="SINGLE_PIPELINE" class="form-radio"><span class="ml-2">Single</span></label>
                                                    <label class="flex items-center"><input type="radio" name="inputClass" value="STANDARD" class="form-radio" checked><span class="ml-2">Standard</span></label>
                                                </div>
                                            </div>
                                            <div class="mb-4">
                                                <label for="s3FilePath" class="block text-sm font-bold text-gray-700 mb-2">Wybierz plik .mp4</label>
                                                <select id="s3FilePath" name="s3FilePath" class="shadow-sm w-full border rounded-lg py-2 px-3" required disabled>
                                                    <option>Kliknij zakładkę, aby załadować...</option>
                                                </select>
                                            </div>
                                            <button type="submit" id="createMp4Button" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg" disabled>Stwórz Input MP4</button>
                                    </form>
                                </div>
                                <div id="panel-link" class="tab-panel hidden">
                                        <form action="/inputs/create-link" method="POST">
                                            <input type="hidden" name="region" value="<%= currentRegion %>">
                                            <div class="mb-4">
                                                <label for="inputNameLink" class="block text-sm font-bold text-gray-700 mb-2">Nazwa Inputu</label>
                                                <input type="text" id="inputNameLink" name="inputName" placeholder="np. urzadzenie-link" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                            </div>
                                            <div class="mb-4">
                                                <label class="block text-sm font-bold text-gray-700 mb-2">Klasa Inputu</label>
                                                <div class="flex items-center space-x-4" id="link-class-radios">
                                                    <label class="flex items-center"><input type="radio" name="inputClassLink" value="SINGLE_PIPELINE" class="form-radio"><span class="ml-2">Single</span></label>
                                                    <label class="flex items-center"><input type="radio" name="inputClassLink" value="STANDARD" class="form-radio" checked><span class="ml-2">Standard</span></label>
                                                </div>
                                            </div>
                                            <div class="mb-4">
                                                <label for="linkDeviceId1" class="block text-sm font-bold text-gray-700 mb-2">Urządzenie Link (Pipeline 0)</label>
                                                <select id="linkDeviceId1" name="linkDeviceId1" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                                    <option value="" disabled selected>-- Wybierz urządzenie --</option>
                                                    <% if (linkDevices && linkDevices.length > 0) { %>
                                                        <% linkDevices.forEach(device => { %>
                                                            <option value="<%= device.Id %>"><%= device.Name %> (<%= device.AvailabilityZone %> | <%= device.ConnectionState %>)</option>
                                                        <% }); %>
                                                    <% } else { %>
                                                        <option disabled>Brak dostępnych urządzeń Link</option>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <div id="link-device2-container" class="mb-4 hidden">
                                                <label for="linkDeviceId2" class="block text-sm font-bold text-gray-700 mb-2">Urządzenie Link (Pipeline 1)</label>
                                                <select id="linkDeviceId2" name="linkDeviceId2" class="shadow-sm w-full border rounded-lg py-2 px-3">
                                                    <option value="">-- Wybierz drugie urządzenie --</option>
                                                    <% if (linkDevices && linkDevices.length > 0) { %>
                                                        <% linkDevices.forEach(device => { %>
                                                            <option value="<%= device.Id %>"><%= device.Name %> (<%= device.AvailabilityZone %> | <%= device.ConnectionState %>)</option>
                                                        <% }); %>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg" <% if (!linkDevices || linkDevices.length === 0) { %>disabled<% } %>>Stwórz Input Link</button>
                                        </form>
                                </div>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-xl shadow-md">
                                <h2 class="text-xl font-semibold mb-4 border-b pb-2">Krok 2: Stwórz nowy Kanał</h2>
                                <div class="pt-4">
                                <form action="/channels/create" method="POST">
                                        <input type="hidden" name="region" value="<%= currentRegion %>">
                                        <div class="mb-4">
                                            <label for="channelName" class="block text-sm font-bold text-gray-700 mb-2">Nazwa Kanału</label>
                                            <input type="text" id="channelName" name="channelName" placeholder="np. transmisja-live" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                        </div>
                                        <div class="mb-4">
                                            <label for="inputId" class="block text-sm font-bold text-gray-700 mb-2">Wybierz Input</label>
                                            <select id="inputId" name="inputId" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                                <option value="" disabled selected>-- Wybierz istniejący input --</option>
                                                <% if (inputs && inputs.length > 0) { %>
                                                    <% inputs.forEach(input => { %>
                                                        <option value="<%= input.Id %>"><%= input.Name %> (<%= input.Type %>)</option>
                                                    <% }); %>
                                                <% } else { %>
                                                    <option disabled>Brak inputów do wyboru</option>
                                                <% } %>
                                            </select>
                                        </div>
                                        <div class="mb-4">
                                            <label for="channelClass" class="block text-sm font-bold text-gray-700 mb-2">Klasa Kanału</label>
                                            <select id="channelClass" name="channelClass" class="shadow-sm w-full border rounded-lg py-2 px-3">
                                                <option value="SINGLE_PIPELINE">Single Pipeline</option>
                                                <option value="STANDARD" selected>Standard (Dual Pipeline)</option>
                                            </select>
                                        </div>
                                        <div class="mb-4">
                                            <label for="mediaPackageChannelId" class="block text-sm font-bold text-gray-700 mb-2">Cel: Kanał MediaPackage</label>
                                            <select id="mediaPackageChannelId" name="mediaPackageChannelId" class="shadow-sm w-full border rounded-lg py-2 px-3" required>
                                                <option value="" disabled selected>-- Wybierz kanał MediaPackage --</option>
                                                <% if (mediaPackageChannels && mediaPackageChannels.length > 0) { %>
                                                    <% mediaPackageChannels.forEach(mpChannel => { %>
                                                        <option value="<%= mpChannel.Id %>"><%= mpChannel.Id %></option>
                                                    <% }); %>
                                                <% } else { %>
                                                    <option disabled>Brak kanałów MediaPackage w tym regionie</option>
                                                <% } %>
                                            </select>
                                        </div>
                                        <button type="submit" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg" <% if (!inputs || inputs.length === 0 || !mediaPackageChannels || mediaPackageChannels.length === 0) { %>disabled<% } %>>
                                            Stwórz Kanał
                                        </button>
                                </form>
                                </div>
                            </div>
                        </div>

                        <!-- Listy zasobów -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div class="bg-white p-6 rounded-xl shadow-md">
                                <h2 class="text-xl font-semibold mb-4">Istniejące Inputy MediaLive</h2>
                                <div class="overflow-x-auto max-h-96">
                                    <table class="min-w-full divide-y divide-gray-200">
                                        <thead class="bg-gray-50 sticky top-0">
                                            <tr>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nazwa</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Typ</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Akcje</th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white divide-y divide-gray-200">
                                            <% if (inputs && inputs.length > 0) { %>
                                                <% inputs.forEach(input => { %>
                                                <tr>
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        <div class="text-sm font-medium text-gray-900"><%= input.Name %></div>
                                                        <div class="text-xs text-gray-500"><%= input.Id %></div>
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= input.Type %></td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                        <% if (input.State === 'ATTACHED') { %>
                                                            <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800"><%= input.State %></span>
                                                        <% } else if (input.State === 'DETACHED') { %>
                                                            <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800"><%= input.State %></span>
                                                        <% } else { %>
                                                            <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800"><%= input.State %></span>
                                                        <% } %>
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                        <form action="/inputs/delete" method="POST" onsubmit="return confirm('Czy na pewno chcesz usunąć input <%= input.Name %>? Tej akcji nie można cofnąć.');">
                                                            <input type="hidden" name="inputId" value="<%= input.Id %>">
                                                            <input type="hidden" name="region" value="<%= currentRegion %>">
                                                            <button type="submit" class="btn btn-gray">Usuń</button>
                                                        </form>
                                                    </td>
                                                </tr>
                                                <% }); %>
                                            <% } else { %>
                                                <tr><td colspan="4" class="px-6 py-4 text-center text-gray-500">Brak inputów w regionie <%= currentRegion %>.</td></tr>
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-xl shadow-md">
                                <h2 class="text-xl font-semibold mb-4">Istniejące Kanały MediaLive</h2>
                                <div class="overflow-x-auto max-h-96">
                                    <table class="min-w-full divide-y divide-gray-200">
                                        <thead class="bg-gray-50 sticky top-0">
                                            <tr>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nazwa</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Akcje</th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white divide-y divide-gray-200">
                                            <% if (channels && channels.length > 0) { %>
                                                <% channels.forEach(channel => { %>
                                                    <tr>
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            <div class="text-sm font-medium text-gray-900"><%= channel.Name %></div>
                                                            <div class="text-xs text-gray-500"><%= channel.Id %></div>
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                            <% if (channel.State === 'RUNNING') { %>
                                                                <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800"><%= channel.State %></span>
                                                            <% } else if (channel.State === 'IDLE') { %>
                                                                <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800"><%= channel.State %></span>
                                                            <% } else { %>
                                                                <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800"><%= channel.State %></span>
                                                            <% } %>
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                            <div class="flex items-center space-x-2">
                                                                <% if (channel.State === 'IDLE') { %>
                                                                    <form action="/channels/start" method="POST">
                                                                        <input type="hidden" name="channelId" value="<%= channel.Id %>">
                                                                        <input type="hidden" name="region" value="<%= currentRegion %>">
                                                                        <button type="submit" class="btn btn-green">Start</button>
                                                                    </form>
                                                                <% } %>
                                                                <% if (channel.State === 'RUNNING') { %>
                                                                    <form action="/channels/stop" method="POST">
                                                                        <input type="hidden" name="channelId" value="<%= channel.Id %>">
                                                                        <input type="hidden" name="region" value="<%= currentRegion %>">
                                                                        <button type="submit" class="btn btn-red">Stop</button>
                                                                    </form>
                                                                <% } %>
                                                                <form action="/channels/delete" method="POST" onsubmit="return confirm('Czy na pewno chcesz usunąć kanał <%= channel.Name %>? Tej akcji nie można cofnąć.');">
                                                                    <input type="hidden" name="channelId" value="<%= channel.Id %>">
                                                                    <input type="hidden" name="region" value="<%= currentRegion %>">
                                                                    <button type="submit" class="btn btn-gray">Usuń</button>
                                                                </form>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                <% }); %>
                                            <% } else { %>
                                                <tr><td colspan="3" class="px-6 py-4 text-center text-gray-500">Brak kanałów w regionie <%= currentRegion %>.</td></tr>
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Widok szczegółowy eventu (karta eventu) -->
                <div id="event-detail-view" class="hidden bg-white p-6 rounded-xl shadow-md">
                    <!-- Treść karty eventu będzie renderowana tutaj przez JavaScript -->
                </div>
            </main>
        </div>
    </div>

    <!-- Create Event Modal -->
    <div id="create-event-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Utwórz nowy event</h3>
                <div class="mt-4 px-7 py-3">
                    <form id="create-event-form" onsubmit="handleCreateEvent(event)">
                        <!-- Nazwa i data -->
                        <div class="mb-4 text-left">
                            <label for="eventNameInput" class="block text-sm font-medium text-gray-700">Nazwa eventu</label>
                            <input type="text" name="eventName" id="eventNameInput" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                        </div>
                        <div class="mb-4 text-left">
                            <label for="lifetimeStartInput" class="block text-sm font-medium text-gray-700">Data rozpoczęcia</label>
                            <input type="datetime-local" name="lifetimeStart" id="lifetimeStartInput" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                        </div>
                        
                        <!-- Klasa -->
                        <div class="mb-4 text-left">
                            <label for="channelClassSelect" class="block text-sm font-medium text-gray-700">Klasa (Pipeline)</label>
                            <select name="channelClass" id="channelClassSelect" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                <option value="STANDARD" selected>Standard (Dual Pipeline)</option>
                                <option value="SINGLE_PIPELINE">Single Pipeline</option>
                            </select>
                        </div>

                        <!-- Rodzaj inputu -->
                        <div class="mb-4 text-left">
                            <label for="inputTypeSelect" class="block text-sm font-medium text-gray-700">Rodzaj inputu</label>
                            <select name="inputType" id="inputTypeSelect" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                <option value="RTMP_PUSH" selected>RTMP (Push)</option>
                                <option value="MP4_FILE">MP4 (z S3)</option>
                                <option value="INPUT_DEVICE">Link</option>
                                <option value="MEDIACONNECT">MediaConnect</option>
                            </select>
                        </div>

                        <!-- Kontener na pola zależne od rodzaju inputu -->
                        <div id="conditional-inputs-container" class="space-y-4">
                            <!-- Pole dla MP4 (S3) -->
                            <div id="mp4-input-fields" class="hidden text-left">
                                <label for="modalS3AssetSelect" class="block text-sm font-medium text-gray-700">Wybierz plik MP4</label>
                                <select name="s3Asset" id="modalS3AssetSelect" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                    <option>Ładowanie zasobów S3...</option>
                                </select>
                            </div>
                            <!-- Pola dla Link -->
                            <div id="link-input-fields" class="hidden text-left space-y-4">
                                <div>
                                    <label for="modalLinkDeviceSelect1" class="block text-sm font-medium text-gray-700">Wybierz urządzenie Link (Pipeline 0)</label>
                                    <select name="linkDeviceId1" id="modalLinkDeviceSelect1" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                         <% if (linkDevices && linkDevices.length > 0) { %>
                                            <% linkDevices.forEach(device => { %>
                                                <option value="<%= device.Id %>"><%= device.Name %> (<%= device.ConnectionState %>)</option>
                                            <% }); %>
                                        <% } else { %>
                                            <option disabled>Brak urządzeń Link</option>
                                        <% } %>
                                    </select>
                                </div>
                                <div id="modalLinkDevice2Container" class="hidden">
                                    <label for="modalLinkDeviceSelect2" class="block text-sm font-medium text-gray-700">Wybierz urządzenie Link (Pipeline 1)</label>
                                    <select name="linkDeviceId2" id="modalLinkDeviceSelect2" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                         <% if (linkDevices && linkDevices.length > 0) { %>
                                            <% linkDevices.forEach(device => { %>
                                                <option value="<%= device.Id %>"><%= device.Name %> (<%= device.ConnectionState %>)</option>
                                            <% }); %>
                                        <% } else { %>
                                            <option disabled>Brak urządzeń Link</option>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                            <!-- Pola dla MediaConnect -->
                            <div id="mediaconnect-input-fields" class="hidden text-left space-y-4">
                                <div>
                                    <label for="modalMediaConnectFlowSelect1" class="block text-sm font-medium text-gray-700">Wybierz MediaConnect Flow (Pipeline 0)</label>
                                    <select name="mediaConnectFlowArn1" id="modalMediaConnectFlowSelect1" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                        <% if (mediaConnectFlows && mediaConnectFlows.length > 0) { %>
                                            <% mediaConnectFlows.forEach(flow => { %>
                                                <option value="<%= flow.FlowArn %>"><%= flow.Name %> (<%= flow.Status %>)</option>
                                            <% }); %>
                                        <% } else { %>
                                            <option disabled>Brak MediaConnect flows</option>
                                        <% } %>
                                    </select>
                                </div>
                                <div id="modalMediaConnectFlow2Container" class="hidden">
                                     <label for="modalMediaConnectFlowSelect2" class="block text-sm font-medium text-gray-700">Wybierz MediaConnect Flow (Pipeline 1)</label>
                                    <select name="mediaConnectFlowArn2" id="modalMediaConnectFlowSelect2" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                        <% if (mediaConnectFlows && mediaConnectFlows.length > 0) { %>
                                            <% mediaConnectFlows.forEach(flow => { %>
                                                <option value="<%= flow.FlowArn %>"><%= flow.Name %> (<%= flow.Status %>)</option>
                                            <% }); %>
                                        <% } else { %>
                                            <option disabled>Brak MediaConnect flows</option>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Output -->
                        <div class="mt-4 text-left">
                            <label for="outputSelect" class="block text-sm font-medium text-gray-700">Output (Kanał MediaPackage)</label>
                            <select name="outputId" id="outputSelect" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                <% if (mediaPackageChannels && mediaPackageChannels.length > 0) { %>
                                    <% mediaPackageChannels.forEach(mpChannel => { %>
                                        <option value="<%= mpChannel.Id %>"><%= mpChannel.Id %></option>
                                    <% }); %>
                                <% } else { %>
                                    <option disabled>Brak kanałów MediaPackage</option>
                                <% } %>
                            </select>
                        </div>

                        <div id="modal-error-message" class="hidden text-red-500 text-sm mt-4 text-left"></div>
                    </form>
                </div>
                <div class="items-center px-4 py-3">
                    <button id="cancel-modal-btn" type="button" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 mr-2">Anuluj</button>
                    <button id="save-event-btn" type="submit" form="create-event-form" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Utwórz</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Funkcja do pokazywania powiadomień
        function showNotification(message, status = 'success') {
            const notificationArea = document.getElementById('notification-area');
            const bgColor = status === 'success' ? 'bg-green-100' : 'bg-red-100';
            const borderColor = status === 'success' ? 'border-green-400' : 'border-red-400';
            const textColor = status === 'success' ? 'text-green-700' : 'text-red-700';
            const title = status === 'success' ? 'Sukces!' : 'Błąd!';

            const notificationDiv = document.createElement('div');
            notificationDiv.className = `${bgColor} border ${borderColor} ${textColor} px-4 py-3 rounded-lg relative`;
            notificationDiv.setAttribute('role', 'alert');
            notificationDiv.innerHTML = `
                <strong class="font-bold">${title}</strong>
                <span class="block sm:inline">${message}</span>
                <span class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer" onclick="this.parentElement.remove()">
                    <svg class="fill-current h-6 w-6 ${textColor}" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
                </span>
            `;
            
            notificationArea.innerHTML = ''; // Czyści poprzednie powiadomienia
            notificationArea.appendChild(notificationDiv);

            // Automatyczne usunięcie po 5 sekundach
            setTimeout(() => {
                if (notificationDiv) {
                    notificationDiv.remove();
                }
            }, 5000);
        }

        // Logika pobierania i wyświetlania eventów
        async function loadEvents() {
            try {
                const response = await fetch('/api/events');
                if (!response.ok) throw new Error('Failed to fetch events');
                
                const data = await response.json();
                const eventsList = document.getElementById('events-list');
                
                if (!data.events || Object.keys(data.events).length === 0) {
                    eventsList.innerHTML = '<div class="text-gray-500 text-sm p-4 text-center">Brak eventów. Kliknij "Nowy Event", aby utworzyć pierwszy.</div>';
                } else {
                    eventsList.innerHTML = '';
                    Object.entries(data.events).forEach(([channelId, event]) => {
                        const eventItem = document.createElement('div');
                        eventItem.className = 'event-item p-3 rounded-lg border border-gray-200';
                        eventItem.dataset.channelId = channelId;
                        eventItem.innerHTML = `
                            <div class="font-medium text-gray-800">${event.eventName}</div>
                            <div class="text-xs text-gray-500 mt-1">ID: ${channelId}</div>
                        `;
                        eventItem.addEventListener('click', () => {
                            selectEvent(channelId);
                        });
                        eventsList.appendChild(eventItem);
                    });
                }
            } catch (error) {
                console.error('Error loading events:', error);
                const eventsList = document.getElementById('events-list');
                eventsList.innerHTML = '<div class="text-red-500 text-sm p-4 text-center">Błąd podczas ładowania eventów.</div>';
            }
        }

        // NOWA FUNKCJA: Wyświetlanie karty eventu
        async function selectEvent(channelId) {
            // Przełącz widok
            document.getElementById('default-view').classList.add('hidden');
            const detailView = document.getElementById('event-detail-view');
            detailView.classList.remove('hidden');
            detailView.innerHTML = '<div class="text-center text-gray-500">Ładowanie szczegółów eventu...</div>';

            // Podświetl aktywny event na liście
            document.querySelectorAll('#events-list .event-item').forEach(item => {
                item.classList.remove('active');
                if (item.dataset.channelId === channelId) {
                    item.classList.add('active');
                }
            });

            try {
                const response = await fetch(`/api/events/${channelId}`);
                if (!response.ok) {
                    const err = await response.json();
                    throw new Error(err.error || 'Nie udało się pobrać danych eventu.');
                }
                const event = await response.json();

                // Renderuj kartę eventu
                renderEventCard(event);
            } catch (error) {
                detailView.innerHTML = `<div class="text-red-500 text-center p-4 bg-red-50 rounded-lg">${error.message}</div>`;
            }
        }

        // NOWA FUNKCJA: Renderowanie zawartości karty eventu
        function renderEventCard(event) {
            const detailView = document.getElementById('event-detail-view');
            const eventStart = new Date(event.lifetime.start);
            const bookingStart = new Date(event.booking.start);
            const bookingEnd = new Date(event.booking.end);

            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            const timeOptions = { hour: '2-digit', minute: '2-digit' };

            // Statusy pipeline'ów
            const pipelineDetails = event.pipelineDetails || [];
            let pipeline0 = pipelineDetails.find(p => p.PipelineId === '0');
            let pipeline1 = pipelineDetails.find(p => p.PipelineId === '1');
            
            const getStatusBadge = (status) => {
                if (status === 'RUNNING' || status === 'ACTIVE') return `<span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">${status}</span>`;
                if (status === 'IDLE') return `<span class="px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">${status}</span>`;
                return `<span class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">${status || 'UNKNOWN'}</span>`;
            };

            detailView.innerHTML = `
                <div class="flex justify-between items-center mb-4 border-b pb-4">
                    <h2 class="text-2xl font-bold text-gray-800">${event.eventName}</h2>
                    <button class="text-sm text-blue-600 hover:underline" onclick="editEventName('${event.channelId}', '${event.eventName}')">Edytuj nazwę</button>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <!-- Lewa kolumna -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-700 mb-2">Informacje o Evencie</h3>
                            <div class="space-y-2 text-sm">
                                <p><strong>ID Kanału:</strong> <span class="font-mono bg-gray-100 px-1 rounded">${event.channelId}</span></p>
                                <p><strong>Region:</strong> ${event.region}</p>
                                <p><strong>Klasa:</strong> ${event.channelClass}</p>
                                <p><strong>Typ Inputu:</strong> ${event.inputType}</p>
                            </div>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-700 mb-2">Zasoby</h3>
                             <div class="space-y-2 text-sm">
                                <p><strong>Input:</strong> <span class="font-mono bg-gray-100 px-1 rounded">${event.inputNames.join(', ')}</span></p>
                                <p><strong>Output:</strong> <span class="font-mono bg-gray-100 px-1 rounded">${event.outputNames.join(', ')}</span></p>
                            </div>
                        </div>
                    </div>

                    <!-- Prawa kolumna -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-700 mb-2">Status Pipeline'ów</h3>
                            <div class="space-y-2 text-sm bg-gray-50 p-3 rounded-lg">
                                <div class="flex justify-between items-center">
                                    <span>Pipeline 0:</span>
                                    ${getStatusBadge(pipeline0 ? pipeline0.ActivePipeline : 'N/A')}
                                </div>
                                <div class="flex justify-between items-center">
                                    <span>Pipeline 1:</span>
                                    ${getStatusBadge(pipeline1 ? pipeline1.ActivePipeline : 'N/A')}
                                </div>
                            </div>
                        </div>
                         <div>
                            <h3 class="text-lg font-semibold text-gray-700 mb-2">Akcje</h3>
                            <button class="btn btn-blue" onclick="alert('Logika przełączania pipeline\\'ów nie jest jeszcze zaimplementowana.')">
                                Przełącz Pipeline
                            </button>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-700 mb-2">Harmonogram</h3>
                            <div class="space-y-2 text-sm">
                                <p><strong>Początek rezerwacji:</strong> ${bookingStart.toLocaleDateString('pl-PL', options)}</p>
                                <p class="font-bold text-blue-600"><strong>Start eventu:</strong> ${eventStart.toLocaleString('pl-PL', {...options, ...timeOptions})}</p>
                                <p><strong>Koniec rezerwacji:</strong> ${bookingEnd.toLocaleDateString('pl-PL', options)}</p>
                            </div>
                            <button class="text-sm text-blue-600 hover:underline mt-2" onclick="editEventLifetime('${event.channelId}', '${event.lifetime.start}')">Edytuj czas startu</button>
                        </div>
                    </div>
                </div>
            `;
        }

        // Placeholder dla funkcji edycji
        function editEventName(channelId, currentName) {
            const newName = prompt('Wprowadź nową nazwę eventu:', currentName);
            if (newName && newName !== currentName) {
                updateEvent(channelId, { eventName: newName });
            }
        }

        function editEventLifetime(channelId, currentStart) {
            const newStart = prompt('Wprowadź nową datę i godzinę startu (YYYY-MM-DDTHH:MM):', currentStart.slice(0, 16));
            if (newStart) {
                updateEvent(channelId, { lifetimeStart: newStart });
            }
        }

        async function updateEvent(channelId, data) {
            try {
                const response = await fetch(`/api/events/${channelId}/update`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.error);
                
                showNotification('Event zaktualizowany pomyślnie!', 'success');
                selectEvent(channelId); // Odśwież widok karty
                loadEvents(); // Odśwież listę po lewej
            } catch (error) {
                showNotification(`Błąd aktualizacji: ${error.message}`, 'danger');
            }
        }
        
        // Logika modala do tworzenia eventów
        const createEventModal = document.getElementById('create-event-modal');
        const openModalBtn = document.getElementById('open-create-event-modal');
        const cancelModalBtn = document.getElementById('cancel-modal-btn');
        const modalErrorMsg = document.getElementById('modal-error-message');
        const inputTypeSelect = document.getElementById('inputTypeSelect');
        const channelClassSelect = document.getElementById('channelClassSelect');

        function showModal() {
            createEventModal.classList.remove('hidden');
            // Ustawienie domyślnej daty i godziny na teraz
            const now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            document.getElementById('lifetimeStartInput').value = now.toISOString().slice(0,16);
            // Zresetuj widoczność pól
            toggleConditionalInputs();
            toggleStandardPipelineInputs();
        }

        function hideModal() {
            createEventModal.classList.add('hidden');
            document.getElementById('create-event-form').reset();
            modalErrorMsg.classList.add('hidden');
            modalErrorMsg.textContent = '';
        }

        openModalBtn.addEventListener('click', showModal);
        cancelModalBtn.addEventListener('click', hideModal);

        async function handleCreateEvent(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const region = document.getElementById('region-select').value;

            // Tworzenie payloadu z podstawowymi danymi
            const payload = {
                eventName: formData.get('eventName'),
                lifetimeStart: formData.get('lifetimeStart'),
                channelClass: formData.get('channelClass'),
                inputType: formData.get('inputType'),
                outputId: formData.get('outputId'),
                region: region
            };
            
            // Dodawanie danych warunkowych do payloadu
            switch (payload.inputType) {
                case 'MP4_FILE':
                    payload.sourceId = formData.get('s3Asset');
                    break;
                case 'INPUT_DEVICE':
                    payload.sourceId1 = formData.get('linkDeviceId1');
                    if (payload.channelClass === 'STANDARD') {
                       payload.sourceId2 = formData.get('linkDeviceId2');
                    }
                    break;
                case 'MEDIACONNECT':
                    payload.sourceId1 = formData.get('mediaConnectFlowArn1');
                    if (payload.channelClass === 'STANDARD') {
                       payload.sourceId2 = formData.get('mediaConnectFlowArn2');
                    }
                    break;
            }

            try {
                const response = await fetch('/api/events/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload),
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || 'Nieznany błąd serwera.');
                }
                
                hideModal();
                showNotification(result.message || 'Event został pomyślnie utworzony.', 'success');
                await loadEvents(); // Odświeżenie listy eventów

            } catch (error) {
                modalErrorMsg.textContent = error.message;
                modalErrorMsg.classList.remove('hidden');
            }
        }
        
        // --- Logika dla zakładki MP4 (S3) ---
        let s3AssetsLoaded = false;
        async function fetchS3AssetsForModal() {
            if (s3AssetsLoaded) return;
            const s3Select = document.getElementById('modalS3AssetSelect');
            s3Select.disabled = true;

            try {
                const response = await fetch('/api/s3-assets?region=<%= currentRegion %>');
                if (!response.ok) {
                    const err = await response.json();
                    throw new Error(err.error || `Błąd serwera: ${response.status}`);
                }
                const assets = await response.json();
                
                s3Select.innerHTML = ''; 

                if (assets.length > 0) {
                    assets.forEach(asset => {
                        const option = document.createElement('option');
                        option.value = asset;
                        option.textContent = asset.replace('<%= process.env.S3_ASSET_PREFIX || "" %>', '');
                        s3Select.appendChild(option);
                    });
                    s3Select.disabled = false;
                } else {
                    const option = document.createElement('option');
                    option.textContent = 'Nie znaleziono plików .mp4';
                    option.disabled = true;
                    s3Select.appendChild(option);
                }
                s3AssetsLoaded = true;

            } catch (error) {
                console.error("Fetch error for modal:", error);
                s3Select.innerHTML = '';
                const option = document.createElement('option');
                option.textContent = `Błąd: ${error.message}`;
                option.disabled = true;
                s3Select.appendChild(option);
            }
        }
        
        function toggleConditionalInputs() {
            const selectedType = inputTypeSelect.value;
            const mp4Fields = document.getElementById('mp4-input-fields');
            const linkFields = document.getElementById('link-input-fields');
            const mcFields = document.getElementById('mediaconnect-input-fields');

            // Ukryj wszystkie
            mp4Fields.classList.add('hidden');
            linkFields.classList.add('hidden');
            mcFields.classList.add('hidden');
            
            // Wyłącz 'required' dla wszystkich selectów
            mp4Fields.querySelector('select').required = false;
            linkFields.querySelector('#modalLinkDeviceSelect1').required = false;
            mcFields.querySelector('#modalMediaConnectFlowSelect1').required = false;

            // Pokaż odpowiednie pola i ustaw 'required'
            switch (selectedType) {
                case 'MP4_FILE':
                    mp4Fields.classList.remove('hidden');
                    mp4Fields.querySelector('select').required = true;
                    fetchS3AssetsForModal();
                    break;
                case 'INPUT_DEVICE':
                    linkFields.classList.remove('hidden');
                    linkFields.querySelector('#modalLinkDeviceSelect1').required = true;
                    break;
                case 'MEDIACONNECT':
                    mcFields.classList.remove('hidden');
                    mcFields.querySelector('#modalMediaConnectFlowSelect1').required = true;
                    break;
            }
            toggleStandardPipelineInputs();
        }

        function toggleStandardPipelineInputs() {
            const selectedClass = channelClassSelect.value;
            const selectedType = inputTypeSelect.value;

            // Link
            const linkDevice2Container = document.getElementById('modalLinkDevice2Container');
            const linkDevice2Select = document.getElementById('modalLinkDeviceSelect2');
            if (selectedType === 'INPUT_DEVICE' && selectedClass === 'STANDARD') {
                linkDevice2Container.classList.remove('hidden');
                linkDevice2Select.required = true;
            } else {
                linkDevice2Container.classList.add('hidden');
                linkDevice2Select.required = false;
            }

            // MediaConnect
            const mcFlow2Container = document.getElementById('modalMediaConnectFlow2Container');
            const mcFlow2Select = document.getElementById('modalMediaConnectFlowSelect2');
            if (selectedType === 'MEDIACONNECT' && selectedClass === 'STANDARD') {
                mcFlow2Container.classList.remove('hidden');
                mcFlow2Select.required = true;
            } else {
                mcFlow2Container.classList.add('hidden');
                mcFlow2Select.required = false;
            }
        }
        
        inputTypeSelect.addEventListener('change', toggleConditionalInputs);
        channelClassSelect.addEventListener('change', toggleStandardPipelineInputs);


        document.addEventListener('DOMContentLoaded', () => {
            // Załaduj eventy po załadowaniu strony
            loadEvents();

            // Oryginalna logika zakładek
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanels = document.querySelectorAll('.tab-panel');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('tab-active'));
                    button.classList.add('tab-active');
                    const targetPanelId = button.getAttribute('data-tab-target');
                    tabPanels.forEach(panel => {
                        if (panel.id === `panel-${targetPanelId}`) {
                            panel.classList.remove('hidden');
                        } else {
                            panel.classList.add('hidden');
                        }
                    });
                });
            });

            // --- Logika dla dynamicznych formularzy ---
            
            // MediaConnect
            const mcRadios = document.getElementById('mc-class-radios');
            const mcFlow2Container = document.getElementById('mc-flow2-container');
            const mcFlow2Select = document.getElementById('flowArn2');
            if (mcRadios) {
                mcRadios.addEventListener('change', (event) => {
                    if (event.target.value === 'STANDARD') {
                        mcFlow2Container.classList.remove('hidden');
                        mcFlow2Select.required = true;
                    } else {
                        mcFlow2Container.classList.add('hidden');
                        mcFlow2Select.required = false;
                    }
                });
            }

            // Link
            const linkRadios = document.getElementById('link-class-radios');
            const linkDevice2Container = document.getElementById('link-device2-container');
            const linkDevice2Select = document.getElementById('linkDeviceId2');
            if (linkRadios) {
                linkRadios.addEventListener('change', (event) => {
                    if (event.target.value === 'STANDARD') {
                        linkDevice2Container.classList.remove('hidden');
                        linkDevice2Select.required = true;
                    } else {
                        linkDevice2Container.classList.add('hidden');
                        linkDevice2Select.required = false;
                    }
                });
            }

            // --- Logika dla zakładki MP4 (S3) ---
            const mp4TabButton = document.getElementById('mp4-tab-button');
            const s3Select = document.getElementById('s3FilePath');
            const createMp4Button = document.getElementById('createMp4Button');
            let mainS3AssetsLoaded = false;

            async function fetchS3AssetsForMainForm() {
                if (mainS3AssetsLoaded) return;

                try {
                    const response = await fetch('/api/s3-assets?region=eu-west-1');
                    if (!response.ok) {
                        const err = await response.json();
                        throw new Error(err.error || `Błąd serwera: ${response.status}`);
                    }
                    const assets = await response.json();
                    
                    s3Select.innerHTML = ''; 

                    if (assets.length > 0) {
                        assets.forEach(asset => {
                            const option = document.createElement('option');
                            option.value = asset;
                            option.textContent = asset.replace('<%= process.env.S3_ASSET_PREFIX || "" %>', '');
                            s3Select.appendChild(option);
                        });
                        s3Select.disabled = false;
                        createMp4Button.disabled = false;
                    } else {
                        const option = document.createElement('option');
                        option.textContent = 'Nie znaleziono plików .mp4';
                        option.disabled = true;
                        s3Select.appendChild(option);
                    }
                    mainS3AssetsLoaded = true;

                } catch (error) {
                    console.error("Fetch error:", error);
                    s3Select.innerHTML = '';
                    const option = document.createElement('option');
                    option.textContent = `Błąd: ${error.message}`;
                    option.disabled = true;
                    s3Select.appendChild(option);
                }
            }
            if (mp4TabButton) {
                mp4TabButton.addEventListener('click', fetchS3AssetsForMainForm);
            }
        });
    </script>
</body>
</html>
